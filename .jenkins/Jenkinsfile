pipeline {
    environment {
        repoDir = 'repo'
    }
    options {
        // See https://javadoc.jenkins.io/hudson/tasks/LogRotator.html
        buildDiscarder(logRotator(daysToKeepStr: '60', numToKeepStr: '100'))
        checkoutToSubdirectory("${repoDir}")
        disableConcurrentBuilds()
        skipStagesAfterUnstable()
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
    }

    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir "${repoDir}/.jenkins"

            // Jenkins' Docker setup mirrors the current directory into the image
            //TODO Create this from pwd().
            additionalBuildArgs '--build-arg HOME=/var/lib/jenkins/workspace/griffon'

//            // Override the workdir applied by Jenkins via "docker run -w".
//            // This doesn't work: Jenkins' takes precedence.
//            args "--workdir=/var/lib/jenkins/workspace/griffon/${repoDir}"
        }
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                sh 'printenv'
                sh script: "cd ${repoDir} && sbt test:compile", label: 'Compile the code'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                sh script: "cd ${repoDir} && sbt test", label: 'Run tests'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${repoDir}/target/scala-*/**", fingerprint: true
            archiveArtifacts artifacts: "${repoDir}/target/streams/**", fingerprint: true
            junit "${repoDir}/target/test-reports/**/*.xml"
        }
        fixed {
            slackSend channel: '#dataingestion', color: 'good',
                      message: "The pipeline ${currentBuild.fullDisplayName} completed successfully."
        }
        regression {
            slackSend channel: '#dataingestion', color: 'warning',
                      message: "The pipeline ${currentBuild.fullDisplayName} has regressed."
        }
        cleanup {
            sh 'rm -rf .[a-z]* *'
        }
    }
}
