pipeline {
    environment {
        repoDir = 'repo'
    }
    options {
        // See https://javadoc.jenkins.io/hudson/tasks/LogRotator.html
        buildDiscarder(logRotator(daysToKeepStr: '60', numToKeepStr: '100'))
        checkoutToSubdirectory("${env.repoDir}")
        disableConcurrentBuilds()
        skipStagesAfterUnstable()
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
    }

    agent {
        dockerfile {
            filename 'Dockerfile.build'
            dir "${env.repoDir}/.jenkins"

            // Jenkins' Docker setup mirrors the current directory into the image
            //TODO Create this from pwd().
            additionalBuildArgs '--build-arg HOME=/var/lib/jenkins/workspace/griffon'

//            // Override the workdir applied by Jenkins via "docker run -w".
//            // This doesn't work: Jenkins' takes precedence.
//            args "--workdir=/var/lib/jenkins/workspace/griffon/${env.repoDir}"
        }
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                sh script: 'printenv', label: 'Print the environment'
                dir("${env.repoDir}") {
                    sh script: "sbt test:compile", label: 'Compile the code'
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                dir("${env.repoDir}") {
                    sh script: "sbt test", label: 'Run tests'
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${env.repoDir}/target/scala-*/**", fingerprint: true
            archiveArtifacts artifacts: "${env.repoDir}/target/streams/**", fingerprint: true
            junit "${env.repoDir}/target/test-reports/**/*.xml"
        }
        fixed {
            slackSend channel: '#dataingestion', color: 'good',
                      message: "The pipeline <${env.BUILD_URL}|${currentBuild.fullDisplayName}> completed *successfully*. :tada:"
        }
        regression {
            slackSend channel: '#dataingestion', color: 'warning',
                      message: "The pipeline <${env.BUILD_URL}|${currentBuild.fullDisplayName}> has *regressed*. :boom:"
        }
        cleanup {
            dir("${env.repoDir}") { deleteDir() }
            dir("${env.repoDir}@tmp") { deleteDir() }
        }
    }
}
